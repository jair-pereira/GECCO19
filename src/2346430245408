import numpy as np
from src import *
import testFunctions as tf
from animation import animation
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    op.param = {'w':0.25,'c1':0.25,'c2':2.00,'alpha':2.00,'beta':0.50,'pr':0.00}
    X1 = op.op_pso(X, op.select_random, op.mut_de, op.crx_exponential)
    X = op.replace_if_best(X, X1)
    op.param = {'w':1.00,'c1':0.75,'c2':0.75,'alpha':1.00,'beta':0.00,'pr':1.00}
    X1 = op.op_pso(X, op.select_random, op.mut_pso, op.crx_blend)
    X = X1
    op.param = {'w':0.00,'c1':0.75,'c2':1.00,'alpha':1.00,'beta':0.75,'pr':0.25}
    X = op.drop_probability(X)
  return X
ge(n=10, my_func=tf.ackley_function, bounds=(-5,5), dimension=40, max_nfe=30)
XXX_output_XXX = Solution.best.getFitness()

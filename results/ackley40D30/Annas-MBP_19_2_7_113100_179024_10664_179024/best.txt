Generation:
30

Phenotype:
import numpy as np
import src
import testFunctions as tf
from animation import animation
n = 50
iteration = 30
my_func = tf.ackley_function
dimension = 40
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
blend_alpha = .5
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  src.solution.updateHistory(X)
  for it in range(iteration):
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = src.op.replace_if_random(X, X1)
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = src.op.replace_if_random(X, X1)
    X = src.op.drop_probability(X)
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[34, 54, 63, 15, 99, 16, 83, 62, 30, 98, 1, 20, 8, 8, 54, 1, 36, 87, 8, 70, 8, 65, 73, 0, 57, 32, 73, 101, 55, 43, 73, 101, 29, 43, 29, 59, 54, 53, 12, 27, 19, 44, 5, 21, 43, 12, 68, 24, 88]
Tree:
None

Fitness:
-3.8054004392051866e-12
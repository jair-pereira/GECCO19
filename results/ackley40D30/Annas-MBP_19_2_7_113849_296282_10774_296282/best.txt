Generation:
30

Phenotype:
import numpy as np
import src
import testFunctions as tf
from animation import animation
n = 50
iteration = 30
my_func = tf.ackley_function
dimension = 40
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
blend_alpha = .5
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  src.solution.updateHistory(X)
  for it in range(iteration):
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_blend)
    X = src.op.replace_if_best(X, X1)
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = src.op.replace_if_best(X, X1)
    X = src.op.drop_probability(X)
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[30, 41, 25, 35, 37, 87, 39, 84, 2, 84, 31, 39, 22, 8, 20, 73, 52, 56, 29, 40, 26, 64, 21, 54, 94, 78, 22, 31, 74, 2, 96, 31, 64, 21, 36, 73, 14, 62, 50, 61, 30, 6, 73, 58, 52, 100, 81, 91]
Tree:
None

Fitness:
-6.061345647623284e-09
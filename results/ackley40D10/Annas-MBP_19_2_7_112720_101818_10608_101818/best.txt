Generation:
30

Phenotype:
import numpy as np
import src
import testFunctions as tf
from animation import animation
n = 50
iteration = 10
my_func = tf.ackley_function
dimension = 40
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
blend_alpha = .5
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  src.solution.updateHistory(X)
  for it in range(iteration):
    X1 = src.op.op_de(X, src.op.select_random, src.op.mut_pso, src.op.crx_blend)
    X = src.op.replace_if_best(X, X1)
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_blend)
    X = src.op.replace_if_best(X, X1)
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[48, 73, 97, 22, 73, 93, 96, 7, 48, 70, 7, 1, 97, 22, 7, 95, 48, 97, 22, 7, 79, 100, 68, 89, 0, 65, 99, 33, 90, 62, 4, 73, 68, 1, 74, 70, 22, 72, 47, 31]
Tree:
None

Fitness:
-0.00034361868001342444
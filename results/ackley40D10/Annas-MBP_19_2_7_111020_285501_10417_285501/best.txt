Generation:
30

Phenotype:
import numpy as np
import src
import testFunctions as tf
from animation import animation
n = 50
iteration = 10
my_func = tf.ackley_function
dimension = 40
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  src.solution.updateHistory(X)
  for it in range(iteration):
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = src.op.replace_if_best(X, X1)
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = X1
    pass
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[85, 60, 91, 9, 9, 51, 83, 83, 31, 92, 21, 36, 67, 71, 57, 47, 1, 85, 31, 61, 70, 57, 23, 50, 44, 44, 80, 16, 81]
Tree:
None

Fitness:
-0.00034024535546040013
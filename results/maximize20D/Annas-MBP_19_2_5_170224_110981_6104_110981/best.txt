Generation:
4

Phenotype:
import numpy as np
import src
import testFunctions as tf
from animation import animation
n = 30
iteration = 30
my_func = tf.ackley_function
dimension = 20
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  src.solution.updateHistory(X)
  for it in range(iteration):
    X1 = src.op.op_de(X, src.op.select_random, src.op.mut_de, src.op.crx_exponential)
    X = src.op.replace_if_random(X, X1)
    X1 = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = X1
    pass
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()
animation(src.solution.history, my_func, *bounds)

Genotype:
[69, 64, 41, 19, 99, 8, 92, 27, 27, 11, 54, 24, 86, 42, 10, 31, 12, 21, 56, 85, 82, 81, 29, 98, 8, 39, 32, 97, 24, 32, 96, 78, 18, 68, 99, 32, 71, 86, 69, 17, 84, 11, 79, 72, 53, 55, 39]
Tree:
None

Fitness:
-0.0003881196205104409
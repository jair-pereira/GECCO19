Generation:
0

Phenotype:
import numpy as np
from src import *
import testFunctions as tf
from animation import animation
n=10
max_nfe = 50
my_func = tf.ackley_function
dimension = 40
bounds = -10, 10
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    op.param = {'w':0.00,'c1':0.25,'c2':0.25,'alpha':0.50,'beta':1.00,'pr':0.75}
    X1 = op.op_pso(X, op.select_random, op.mut_pso, op.crx_blend)
    X = op.replace_if_random(X, X1)
    op.param = {'w':1.00,'c1':0.00,'c2':0.25,'alpha':0.75,'beta':0.25,'pr':0.50}
    X = op.drop_worst(X) 
  return X
ge(n, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[53, 56, 43, 23, 26, 32, 100, 97, 84, 13, 92, 27, 46, 84, 94, 79, 77, 33, 26, 10, 83, 17, 11, 42, 61, 8, 13, 7, 100, 49, 81, 50, 36, 13, 19, 47, 89, 37, 33, 65, 45, 90, 86, 4, 39, 78, 23, 24, 8, 96, 4]
Tree:
(<S> (<init> import numpy as np{::}from src import *{::}import testFunctions as tf{::}from animation import animation{::} (<params> n= (<n> 10) {::}max_nfe = 50{::}my_func = tf.ackley_function{::}dimension = 40{::}bounds = -10, 10{::}) {::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{: (<main> (<ModificationRound> (<step> (<param> op.param = {'w': (<w> 0.00) ,'c1': (<c1> 0.25) ,'c2': (<c2> 0.25) ,'alpha': (<alpha> 0.50) ,'beta': (<beta> 1.00) ,'pr': (<pr> 0.75) }{::}) {::}X1 =  (<operator> (<op2> op.op_pso)) (X,  (<sel> (<random> op.select_random)) ,  (<mut> (<pso> op.mut_pso)) ,  (<cross> (<cross_blend> op.crx_blend)) ){::}X =  (<output> (<replace_if_random> op.replace_if_random(X, X1))))) {::} (<param> op.param = {'w': (<w> 1.00) ,'c1': (<c1> 0.00) ,'c2': (<c2> 0.25) ,'alpha': (<alpha> 0.75) ,'beta': (<beta> 0.25) ,'pr': (<pr> 0.50) }{::}) (<DropRound> (<DropWorst> X = op.drop_worst(X) {::}))) :}{::}return X:}) {::} (<call> ge(n, my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
1
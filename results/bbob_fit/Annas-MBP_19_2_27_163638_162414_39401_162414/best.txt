Generation:
18

Phenotype:
import numpy as np
from src import *
import testFunctions as tf
from animation import animation
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    [Xi.getFitness() for Xi in X]
    op.param = {'w':0.00,'c1':0.00,'c2':0.00,'alpha':0.00,'beta':0.00,'pr':0.00}
    X1 = op.op_pso(X, op.select_random, op.mut_pso, op.crx_exponential)
    X = op.replace_if_best(X, X1)
    op.param = {'w':0.00,'c1':0.00,'c2':0.00,'alpha':0.00,'beta':0.00,'pr':0.00}
    X1 = op.op_de(X, op.select_random, op.mut_de, op.crx_exponential)
    X = op.replace_if_random(X, X1)
  return X
ge(10, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[8418, 3115, 3244, 8897, 2816, 1339, 4154, 6984, 6201, 4095, 5273, 1240, 3924, 7139, 9194, 2737, 59, 4644, 7336, 6590, 4427, 4835, 5721, 3318, 5988, 5323, 2902, 7705, 2714, 1462, 1585, 6217, 3860, 309, 2580, 3945, 7048, 5267, 3425, 8971, 7252, 3285, 9383, 2146, 2951, 5730, 7262, 6554, 8032, 3920, 6767, 9125, 8601, 2727, 1441, 5154, 4389, 8448, 9771, 6278, 4133, 782, 666]
Tree:
(<S> (<init> import numpy as np{::}from src import *{::}import testFunctions as tf{::}from animation import animation{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}[Xi.getFitness() for Xi in X]{::} (<main> (<ModificationRound> (<step> (<param> op.param = {'w': (<w> 0.00) ,'c1': (<c1> 0.00) ,'c2': (<c2> 0.00) ,'alpha': (<alpha> 0.00) ,'beta': (<beta> 0.00) ,'pr': (<pr> 0.00) }{::}) {::}X1 =  (<operator> (<op2> op.op_pso)) (X,  (<sel> (<random> op.select_random)) ,  (<mut> (<pso> op.mut_pso)) ,  (<cross> (<cross_exp> op.crx_exponential)) ){::}X =  (<output> (<replace_if_better> op.replace_if_best(X, X1)))) {::} (<step> (<param> op.param = {'w': (<w> 0.00) ,'c1': (<c1> 0.00) ,'c2': (<c2> 0.00) ,'alpha': (<alpha> 0.00) ,'beta': (<beta> 0.00) ,'pr': (<pr> 0.00) }{::}) {::}X1 =  (<operator> (<op1> op.op_de)) (X,  (<sel> (<random> op.select_random)) ,  (<mut> (<de> op.mut_de)) ,  (<cross> (<cross_exp> op.crx_exponential)) ){::}X =  (<output> (<replace_if_random> op.replace_if_random(X, X1)))))) :}{::}return X:}{::}) {::} (<call> ge( (<n> 10) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
0
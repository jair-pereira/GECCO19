Generation:
0

Phenotype:
import numpy as np
from src import *
import testFunctions as tf
from animation import animation
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    op.param = {'w':0.50,'c1':0.75,'c2':1.00,'alpha':0.25,'beta':0.25,'pr':2.00}
    X1 = op.op_pso(X, op.select_random, op.mut_pso, op.crx_exponential)
    X = op.replace_if_best(X, X1)
    op.param = {'w':0.50,'c1':2.00,'c2':2.00,'alpha':2.00,'beta':0.75,'pr':2.00}
    X1 = op.op_de(X, op.select_random, op.mut_de, op.crx_blend)
    X = X1
    op.param = {'w':0.75,'c1':1.00,'c2':0.00,'alpha':0.00,'beta':0.25,'pr':1.00}
    pass
  return X
ge(n=10, my_func=tf.ackley_function, bounds=(-5,5), dimension=40, max_nfe=30)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[71, 47, 5, 62, 87, 38, 97, 78, 16, 10, 96, 67, 96, 95, 4, 4, 35, 13, 52, 65, 72, 99, 10, 11, 64, 91, 22, 44, 77, 9, 26, 81, 16, 20, 96, 80, 9, 7, 45, 71, 45, 35, 23, 39, 65, 9, 32, 89, 41, 98, 78, 24, 18, 70, 72, 86, 75, 18, 92, 42, 33, 85, 39, 66, 67, 36, 91, 98, 62, 98, 87, 17, 84, 88, 10, 44]
Tree:
(<S> (<init> import numpy as np{::}from src import *{::}import testFunctions as tf{::}from animation import animation{::}{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}{::}while Solution.nfe < max_nfe:{: (<main> (<ModificationRound> (<step> (<param> op.param = {'w': (<w> 0.50) ,'c1': (<c1> 0.75) ,'c2': (<c2> 1.00) ,'alpha': (<alpha> 0.25) ,'beta': (<beta> 0.25) ,'pr': (<pr> 2.00) }{::}) {::}X1 =  (<operator> (<op2> op.op_pso)) (X,  (<sel> (<random> op.select_random)) ,  (<mut> (<pso> op.mut_pso)) ,  (<cross> (<cross_exp> op.crx_exponential)) ){::}X =  (<output> (<replace_if_better> op.replace_if_best(X, X1))) {::}) {::} (<step> (<param> op.param = {'w': (<w> 0.50) ,'c1': (<c1> 2.00) ,'c2': (<c2> 2.00) ,'alpha': (<alpha> 2.00) ,'beta': (<beta> 0.75) ,'pr': (<pr> 2.00) }{::}) {::}X1 =  (<operator> (<op1> op.op_de)) (X,  (<sel> (<random> op.select_random)) ,  (<mut> (<de> op.mut_de)) ,  (<cross> (<cross_blend> op.crx_blend)) ){::}X =  (<output> (<choose_all> X1)) {::})) {::} (<param> op.param = {'w': (<w> 0.75) ,'c1': (<c1> 1.00) ,'c2': (<c2> 0.00) ,'alpha': (<alpha> 0.00) ,'beta': (<beta> 0.25) ,'pr': (<pr> 1.00) }{::}) (<DropRound> (<DropOld> pass))) :}{::}return X:}{::}) {::} (<call> ge(n= (<n> 10) , my_func=tf.ackley_function, bounds=(-5,5), dimension=40, max_nfe=30){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
1
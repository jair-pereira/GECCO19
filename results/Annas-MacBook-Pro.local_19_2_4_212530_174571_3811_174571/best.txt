Generation:
50

Phenotype:
import numpy as np
import src
import testFunctions as tf
n = 30
iteration = 30
my_func = tf.ackley_function
dimension = 2
bounds = -5, 5
beta = .5
pr = .7
tournament = 5
w = .5
c1 = .5
c2 = 1
pa = .25
dp = .1
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  for it in range(iteration):
    X1 = src.op.op_de(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    X = src.op.replace_if_best(X, X1)
    X1 = src.op.op_de(X, src.op.select_random, src.op.mut_de, src.op.crx_exponential)
    X = src.op.replace_if_best(X, X1)
    X = src.op.drop_worst(X) 
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[629, 773, 557, 995, 264, 627, 427, 602, 725, 224, 97, 455, 62, 861, 945, 404, 243, 709, 640, 514, 618, 727, 429, 299, 812, 131, 109, 896, 252, 700, 214, 200, 342, 380, 147, 833, 426, 269, 319]
Tree:
(<S> (<init> import numpy as np{::}import src{::}import testFunctions as tf{::} (<params> n = 30{::}iteration = 30{::}my_func = tf.ackley_function{::}dimension = 2{::}bounds = -5, 5{::}beta = .5{::}pr = .7{::}tournament = 5{::}w = .5{::}c1 = .5{::}c2 = 1{::}pa = .25{::}dp = .1{::}) {::}def ge():{:X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)]){::}[Xi.initRandom() for Xi in X]{::}for it in range(iteration):{: (<main> (<ModificationRound> (<step> X1 =  (<operator> (<de> src.op.op_de)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_pso) ,  (<cross> src.op.crx_exponential) ){::}X =  (<output> (<replace_if_better> src.op.replace_if_best(X, X1)))) {::} (<step> X1 =  (<operator> (<de> src.op.op_de)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_de) ,  (<cross> src.op.crx_exponential) ){::}X =  (<output> (<replace_if_better> src.op.replace_if_best(X, X1))))) {::} (<DropRound> (<DropWorst> X = src.op.drop_worst(X) {::}))) :}{::}return X:}) {::} (<call> ge(){::}XXX_output_XXX = src.solution.best.getFitness()))

Fitness:
-0.0
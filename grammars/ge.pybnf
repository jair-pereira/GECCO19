# parcing syntax: "<__>" - non-terminals, "{::}" - new line, "{:_____:}" - indentation

# Initialization, no branching
<S> ::= <init>{::}<call>
<init> ::= import numpy as np{::}import src{::}import testFunctions as tf{::}from animation import animation{::}<params>{::}def ge():{:X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)]){::}[Xi.initRandom() for Xi in X]{::}src.solution.updateHistory(X){::}for it in range(iteration):{:<main>:}{::}return X:}

# parameters
<params> ::= n = 50{::}iteration = 10{::}my_func = tf.ackley_function{::}dimension = 40{::}bounds = -5, 5{::}beta = .5{::}pr = .7{::}tournament = 5{::}w = .5{::}c1 = .5{::}c2 = 1{::}pa = .25{::}dp = .1{::}

# branching starts here
<main> ::= <ModificationRound> |<ModificationRound>{::}<DropRound>

<ModificationRound> ::= <step> | <step>{::}<step> 
<step> ::= X1 = <operator>(X, <sel>, <mut>, <cross>){::}X = <output>

# producing different versions of X1
<operator> ::= <de> | <pso>
<de> ::= src.op.op_de 
<pso> ::= src.op.op_pso
	
<sel> ::= <random> # | <tournament>
<random> ::= src.op.select_random 

<cross> ::= src.op.crx_exponential # | src.op.crx_npoint

<mut> ::= src.op.mut_de | src.op.mut_pso 

# ways to choose between X and X1
<output> ::= <choose_all> | <replace_if_better> | <replace_if_random>
<choose_all> ::= X1 
<replace_if_better> ::= src.op.replace_if_best(X, X1) 
<replace_if_random> ::= src.op.replace_if_random(X, X1)

<DropRound> ::= <DropRandom>|<DropWorst>|<DropOld>
<DropRandom> ::= X = src.op.drop_probability(X){::} 
<DropWorst> ::= X = src.op.drop_worst(X) {::}
<DropOld> ::= pass 

<call> ::= ge(){::}XXX_output_XXX = src.solution.best.getFitness()